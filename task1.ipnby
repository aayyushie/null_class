# Cell 1: Install dependencies (run in Colab or Jupyter)
!pip install transformers datasets torch

# Cell 2: Import libraries
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM, Trainer, TrainingArguments, TextDataset, DataCollatorForLanguageModeling

# Cell 3: Load and preprocess your dataset
# Example: Prepare a simple text file with one article per line
train_file = "train_articles.txt"  # Replace with your dataset path

# Cell 4: Load tokenizer and model
model_name = "gpt2"  # or "t5-small" for T5
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name)

# Cell 5: Create dataset and data collator
def load_dataset(file_path, tokenizer, block_size=128):
    return TextDataset(
        tokenizer=tokenizer,
        file_path=file_path,
        block_size=block_size
    )

train_dataset = load_dataset(train_file, tokenizer)
data_collator = DataCollatorForLanguageModeling(
    tokenizer=tokenizer, mlm=False
)

# Cell 6: Set up training arguments
training_args = TrainingArguments(
    output_dir="./results",
    overwrite_output_dir=True,
    num_train_epochs=1,
    per_device_train_batch_size=2,
    save_steps=500,
    save_total_limit=2,
    prediction_loss_only=True,
    logging_steps=100
)

# Cell 7: Initialize Trainer and train
trainer = Trainer(
    model=model,
    args=training_args,
    data_collator=data_collator,
    train_dataset=train_dataset
)

trainer.train()

# Cell 8: Save the fine-tuned model
model.save_pretrained("./fine_tuned_article_generator")
tokenizer.save_pretrained("./fine_tuned_article_generator")

# Cell 9: Test the fine-tuned model
from transformers import pipeline
generator = pipeline("text-generation", model="./fine_tuned_article_generator", tokenizer=tokenizer)
prompt = "The future of AI in healthcare"
print(generator(prompt, max_length=200))
